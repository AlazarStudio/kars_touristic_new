import React from 'react';
import {
  List,
  Datagrid,
  TextField,
  EditButton,
  DeleteButton,
  ImageInput,
  ImageField,
  ReferenceField,
  useDataProvider,
  useNotify,
  useRedirect,
  ArrayInput,
  SimpleFormIterator,
  ReferenceInput,
  SelectInput,
  ArrayField,
  SingleFieldList,
  ChipField,
} from 'react-admin';
import { Create, SimpleForm, TextInput } from 'react-admin';
import { Edit } from 'react-admin';
import { uploadFile, uploadFiles } from '../JS/fileUploadUtils';
import { handleSave, handleSaveWithImages } from '../JS/fileUploadUtils';
import uploadsConfig from '../../../uploadsConfig';
import { useDrag, useDrop, DndProvider } from 'react-dnd';
import { HTML5Backend } from 'react-dnd-html5-backend';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ–¥–Ω–æ–≥–æ –¥–Ω—è —Ç—É—Ä–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è
const DraggableDay = ({ day, index, moveDay }) => {
  const [, ref] = useDrag({
    type: 'DAY',
    item: { index },
  });

  const [, drop] = useDrop({
    accept: 'DAY',
    hover: (draggedItem) => {
      if (draggedItem.index !== index) {
        moveDay(draggedItem.index, index);
        draggedItem.index = index;
      }
    },
  });

  return (
    <div ref={(node) => ref(drop(node))} style={{ padding: '8px', border: '1px solid #ddd', marginBottom: '4px', cursor: 'grab' }}>
      <strong>{day.title}</strong>
      <p style={{ margin: 0 }}>{day.description}</p>
    </div>
  );
};

// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Å–ø–∏—Å–∫–∞ MultiDayTours —Å draggable –¥–Ω—è–º–∏
export const MultiDayToursList = () => {
  const [infoByDays, setInfoByDays] = useState([]);
  const dataProvider = useDataProvider();
  const notify = useNotify();

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –¥–Ω–µ–π
  const moveDay = useCallback((fromIndex, toIndex) => {
    setInfoByDays((prev) => {
      const updatedDays = [...prev];
      const [movedItem] = updatedDays.splice(fromIndex, 1);
      updatedDays.splice(toIndex, 0, movedItem);
      return updatedDays;
    });
  }, []);

  // –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ –¥–Ω–µ–π
  const saveOrder = async (multiDayTourId) => {
    try {
      await dataProvider.update('multidaytours', {
        id: multiDayTourId,
        data: { infoByDays },
      });
      notify('–ü–æ—Ä—è–¥–æ–∫ –¥–Ω–µ–π –æ–±–Ω–æ–≤–ª–µ–Ω!', { type: 'success' });
    } catch (error) {
      notify('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–∞ –¥–Ω–µ–π!', { type: 'warning' });
    }
  };

  return (
    <DndProvider backend={HTML5Backend}>
      <List>
        <Datagrid rowClick="edit">
          <TextField source="id" />
          <TextField source="title" label="–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—É—Ä–∞" />
          <TextField source="transport" label="–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç" />
          <TextField source="duration" label="–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å" />
          <TextField source="price" label="–¶–µ–Ω–∞" />

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞ */}
          <ReferenceField source="regionId" reference="regions" label="–†–µ–≥–∏–æ–Ω">
            <TextField source="title" />
          </ReferenceField>

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π */}
          <ArrayField source="img" label="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è">
            <SingleFieldList>
              <ImageField source="src" title="–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" />
            </SingleFieldList>
          </ArrayField>

          {/* –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω–µ–π —Ç—É—Ä–∞ —Å Drag and Drop */}
          <ArrayField source="infoByDays" label="–î–Ω–∏ —Ç—É—Ä–∞">
            <div>
              {infoByDays.length > 0 ? (
                infoByDays.map((day, index) => (
                  <DraggableDay key={day.id} index={index} day={day} moveDay={moveDay} />
                ))
              ) : (
                <p>–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–Ω—è—Ö</p>
              )}
              <button onClick={() => saveOrder()} style={{ marginTop: '10px', padding: '5px 10px' }}>
                –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—è–¥–æ–∫
              </button>
            </div>
          </ArrayField>

          <EditButton />
          <DeleteButton />
        </Datagrid>
      </List>
    </DndProvider>
  );
};


export const MultiDayToursCreate = () => {
  return (
    <Create
      transform={(data) => ({
        ...data,
        infoByDays:
          data.infoByDays?.map((day) => ({
            title: day.title,
            description: day.description,
          })) || [],
      })}
    >
      <SimpleForm>
        <TextInput source="title" fullWidth />
        <TextInput source="transport" />
        <TextInput source="duration" />
        <TextInput source="timeToStart" />
        <TextInput source="type" />
        <TextInput source="level" />
        <TextInput source="minNumPeople" />
        <TextInput source="maxNumPeople" />
        <TextInput source="price" />
        <TextInput source="addInfo" multiline />
        <ImageInput source="img" label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" multiple>
          <ImageField source="src" title="title" />
        </ImageInput>
        <ReferenceInput source="regionId" reference="regions">
          <SelectInput optionText="title" />
        </ReferenceInput>

        {/* üî• –ü–æ–ª–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–Ω–µ–π —Ç—É—Ä–∞ —Å Drag & Drop */}
        <ArrayInput source="infoByDays" label="–î–Ω–∏ —Ç—É—Ä–∞">
          <SimpleFormIterator>
            <TextInput source="title" label="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è" />
            <TextInput source="description" label="–û–ø–∏—Å–∞–Ω–∏–µ" multiline />
          </SimpleFormIterator>
        </ArrayInput>
      </SimpleForm>
    </Create>
  );
};

// ------------------ MultiDayTours Edit ------------------
import { useState, useCallback, useRef } from 'react';
import { useDrag, useDrop } from 'react-dnd';

const ITEM_TYPE = 'DAY';

const DraggableDay = ({ index, moveDay, record }) => {
  const ref = useRef(null);

  const [, drop] = useDrop({
    accept: ITEM_TYPE,
    hover(item) {
      if (item.index !== index) {
        moveDay(item.index, index);
        item.index = index;
      }
    },
  });

  const [{ isDragging }, drag] = useDrag({
    type: ITEM_TYPE,
    item: { index },
    collect: (monitor) => ({
      isDragging: monitor.isDragging(),
    }),
  });

  drag(drop(ref));

  return (
    <div ref={ref} style={{ opacity: isDragging ? 0.5 : 1 }}>
      <TextInput source={`infoByDays[${index}].title`} label="–ù–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è" />
      <TextInput
        source={`infoByDays[${index}].description`}
        label="–û–ø–∏—Å–∞–Ω–∏–µ"
        multiline
      />
    </div>
  );
};

export const MultiDayToursEdit = () => {
  const [days, setDays] = useState([]);
  const moveDay = useCallback((fromIndex, toIndex) => {
    setDays((prevDays) => {
      const updatedDays = [...prevDays];
      const [movedDay] = updatedDays.splice(fromIndex, 1);
      updatedDays.splice(toIndex, 0, movedDay);
      return updatedDays;
    });
  }, []);

  return (
    <Edit
      mutationMode="pessimistic"
      transform={(data) => ({
        ...data,
        infoByDays: days.map((day, index) => ({
          id: day.id,
          title: day.title,
          description: day.description,
          order: index,
        })),
      })}
    >
      <SimpleForm>
        <TextInput source="title" fullWidth />
        <TextInput source="transport" />
        <TextInput source="duration" />
        <TextInput source="timeToStart" />
        <TextInput source="type" />
        <TextInput source="level" />
        <TextInput source="minNumPeople" />
        <TextInput source="maxNumPeople" />
        <TextInput source="price" />
        <TextInput source="addInfo" multiline />
        <ImageInput source="img" label="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" multiple>
          <ImageField source="src" title="title" />
        </ImageInput>
        <ReferenceInput source="regionId" reference="regions">
          <SelectInput optionText="title" />
        </ReferenceInput>

        {/* üî• Drag & Drop –¥–ª—è –¥–Ω–µ–π —Ç—É—Ä–∞ */}
        <ArrayInput source="infoByDays" label="–î–Ω–∏ —Ç—É—Ä–∞">
          <SimpleFormIterator>
            {days.map((day, index) => (
              <DraggableDay
                key={index}
                index={index}
                moveDay={moveDay}
                record={day}
              />
            ))}
          </SimpleFormIterator>
        </ArrayInput>
      </SimpleForm>
    </Edit>
  );
};
