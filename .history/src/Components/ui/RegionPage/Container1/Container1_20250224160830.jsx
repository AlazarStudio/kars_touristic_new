import React, { useEffect, useRef, useState } from 'react';
import {
  TextField,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
} from '@mui/material';
import SearchIcon from '@mui/icons-material/Search';
import classes from './Container1.module.css';
import CenterBlock from '../../../Standart/CenterBlock/CenterBlock';
import WidthBlock from '../../../Standart/WidthBlock/WidthBlock';
import Header1 from '../Header/Header1';

// –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∏–ª–∏ Swiper
import 'swiper/css';
import 'swiper/css/navigation';
import 'swiper/css/pagination';

import Card1 from '../Cards/Tours/Card1/Card1';
import HotelCard from '../Cards/Hotels/HotelCard';
import PlacesCard from '../Cards/PlacesCard/PlacesCard';
import EventsCard from '../Cards/Events/EventsCard';

function Container1({
  currentRegion,
  selected,
  setSelected,
  multiDayTours = [],
  onerDayTours = [],
  hotels = [],
  places = [],
  events = [],
}) {
  useEffect(() => {
    if (selected !== null) {
      localStorage.setItem('selectedContainer', selected);
    }
  }, [selected]);

  // üîπ –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
  const [searchQuery, setSearchQuery] = useState('');
  const [transportFilter, setTransportFilter] = useState('');
  const [typeFilter, setTypeFilter] = useState('');
  const [levelFilter, setLevelFilter] = useState('');
  const [starFilter, setStarFilter] = useState(''); // üîπ –§–∏–ª—å—Ç—Ä –ø–æ –∑–≤–µ–∑–¥–∞–º –æ—Ç–µ–ª–µ–π

  const options = [
    { img: '/images/baggage.webp', text: '–ú–Ω–æ–≥–æ–¥–Ω–µ–≤–Ω—ã–µ —Ç—É—Ä—ã' },
    { img: '/images/ekskurs.webp', text: '–û–¥–Ω–æ–¥–Ω–µ–≤–Ω—ã–µ —ç–∫—Å–∫—É—Ä—Å–∏–∏' },
    { img: '/images/avtor.webp', text: '–ê–≤—Ç–æ—Ä—Å–∫–∏–µ —Ç—É—Ä—ã' },
    { img: '/images/appart.webp', text: '–û—Ç–µ–ª–∏ / –ê–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã' },
    { img: '/images/searchLoc.webp', text: '–ß—Ç–æ –ø–æ—Å–µ—Ç–∏—Ç—å' },
    { img: '/images/event.webp', text: '–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ Mice –∏–≤–µ–Ω—Ç—ã' },
  ];

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  const selectedData =
    selected === 0
      ? multiDayTours.filter((tour) =>
          Array.isArray(tour.regionId)
            ? tour.regionId.includes(currentRegion.id)
            : tour.regionId === currentRegion.id
        )
      : selected === 1
      ? onerDayTours.filter((tour) =>
          Array.isArray(tour.regionId)
            ? tour.regionId.includes(currentRegion.id)
            : tour.regionId === currentRegion.id
        )
      : selected === 2
      ? []
      : selected === 3
      ? hotels.filter((hotel) => hotel.regionId === currentRegion.id)
      : selected === 4
      ? places.filter((place) => place.regionId === currentRegion.id)
      : selected === 5
      ? events.filter((event) => event.regionId === currentRegion.id)
      : [];

  // üîπ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø–æ–∏—Å–∫—É –∏ select'–∞–º
  const filteredData = selectedData.filter((item) => {
    const matchesSearch =
      searchQuery.length === 0 ||
      item.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
      (item.places &&
        item.places.some((place) =>
          place.toLowerCase().includes(searchQuery.toLowerCase())
        ));

        const matchesTransport =
        transportFilter === '' ||
        (item.transport &&
          item.transport.toLowerCase() === transportFilter.toLowerCase());
      

    const matchesType =
      typeFilter === '' || (item.type && item.type === typeFilter);

    const matchesLevel =
      levelFilter === '' || (item.level && item.level === levelFilter);

    const matchesStars =
      starFilter === '' || (item.stars && item.stars.toString() === starFilter);

    return (
      matchesSearch &&
      matchesTransport &&
      matchesType &&
      matchesLevel &&
      matchesStars
    );
  });

  const swiperRef = useRef(null);

  return (
    <>
      <div className={classes.containerImg}>
        <img
          src={currentRegion.img[1]}
          alt={currentRegion.title}
          className={classes.backImg}
        />
        <Header1 />
        <CenterBlock>
          <WidthBlock>
            <div className={classes.container}>
              <div className={classes.containerLeft}>
                <img src={currentRegion.img[0]} alt={currentRegion.title} />
                <span>{currentRegion.title}</span>
                <span>{currentRegion.description}</span>
              </div>
              <div className={classes.containerRight}>
                {options.map((el, index) => (
                  <div
                    key={index}
                    className={`${classes.containerRightEl} ${
                      selected === index ? classes.selected : ''
                    }`}
                    onClick={() => setSelected(index)}
                  >
                    <img src={el.img} alt={el.text} />
                    <span>{el.text}</span>
                  </div>
                ))}
              </div>
            </div>
          </WidthBlock>
        </CenterBlock>
      </div>

      {/* üîπ –§–∏–ª—å—Ç—Ä –∏ –ø–æ–∏—Å–∫ */}
      <CenterBlock>
        <WidthBlock>
          <div className={classes.container2}>
            <div className={classes.container2Title}>
              {selected !== null &&
              selected >= 0 &&
              selected < options.length ? (
                <>
                  <span>{options[selected].text}</span>
                  <span>–ù–∞–π–¥–µ–Ω–æ: {filteredData.length}</span>
                </>
              ) : (
                <span>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</span>
              )}
            </div>

            <div className={classes.filter}>
              {/* –ü–æ–ª–µ –ø–æ–∏—Å–∫–∞ */}
              <TextField
                fullWidth
                label="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ –º–µ—Å—Ç—É"
                variant="outlined"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                InputProps={{
                  startAdornment: <SearchIcon />,
                }}
              />

              {/* –§–∏–ª—å—Ç—Ä—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç—É—Ä–æ–≤ */}
              {selected === 0 || selected === 1 || selected === 2 ? (
                <>
                  <FormControl fullWidth>
                    <InputLabel>–°–ø–æ—Å–æ–± –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏—è</InputLabel>
                    <Select
                      value={transportFilter}
                      onChange={(e) => setTransportFilter(e.target.value)}
                    >
                      <MenuItem value="">–í—Å–µ</MenuItem>
                      <MenuItem value="–ê–≤—Ç–æ–±—É—Å">–ê–≤—Ç–æ–±—É—Å</MenuItem>
                      <MenuItem value="–ü–æ–µ–∑–¥">–ü–æ–µ–∑–¥</MenuItem>
                      <MenuItem value="–°–∞–º–æ–ª–µ—Ç">–°–∞–º–æ–ª–µ—Ç</MenuItem>
                      <MenuItem value="–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫">–í–Ω–µ–¥–æ—Ä–æ–∂–Ω–∏–∫</MenuItem>
                    </Select>
                  </FormControl>

                  <FormControl fullWidth>
                    <InputLabel>–¢–∏–ø –ø–æ–µ–∑–¥–∫–∏</InputLabel>
                    <Select
                      value={typeFilter}
                      onChange={(e) => setTypeFilter(e.target.value)}
                    >
                      <MenuItem value="">–í—Å–µ</MenuItem>
                      <MenuItem value="–§–æ—Ç–æ –¢—É—Ä">–§–æ—Ç–æ –¢—É—Ä</MenuItem>
                      <MenuItem value="–≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π">–≠–∫—Å–∫—É—Ä—Å–∏–æ–Ω–Ω—ã–π</MenuItem>
                      <MenuItem value="–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö">–ê–∫—Ç–∏–≤–Ω—ã–π –æ—Ç–¥—ã—Ö</MenuItem>
                    </Select>
                  </FormControl>
                  <FormControl fullWidth>
                    <InputLabel>–£—Ä–æ–≤–µ–Ω—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</InputLabel>
                    <Select
                      value={levelFilter}
                      onChange={(e) => setLevelFilter(e.target.value)}
                    >
                      <MenuItem value="">–í—Å–µ</MenuItem>
                      <MenuItem value="–ë–∞–∑–æ–≤–∞—è">–ë–∞–∑–æ–≤–∞—è</MenuItem>
                      <MenuItem value="–°—Ä–µ–¥–Ω—è—è">–°—Ä–µ–¥–Ω—è—è</MenuItem>
                      <MenuItem value="–í—ã—Å–æ–∫–∞—è">–í—ã—Å–æ–∫–∞—è</MenuItem>
                    </Select>
                  </FormControl>
                </>
              ) : null}

              {/* –§–∏–ª—å—Ç—Ä –ø–æ –∑–≤–µ–∑–¥–∞–º —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–µ–ª–µ–π */}
              {selected === 3 && (
                <FormControl fullWidth>
                  <InputLabel>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥</InputLabel>
                  <Select
                    value={starFilter}
                    onChange={(e) => setStarFilter(e.target.value)}
                  >
                    <MenuItem value="">–í—Å–µ</MenuItem>
                    {[1, 2, 3, 4, 5].map((stars) => (
                      <MenuItem
                        key={stars}
                        value={stars.toString()}
                      >{`${stars} ‚òÖ`}</MenuItem>
                    ))}
                  </Select>
                </FormControl>
              )}
            </div>
            <div className={classes.cards}>
              {filteredData.length > 0 ? (
                filteredData.map((item) =>
                  selected === 0 || selected === 1 || selected === 2 ? (
                    <Card1 item={item} swiperRef={swiperRef} key={item.id} />
                  ) : selected === 3 ? (
                    <HotelCard
                      item={item}
                      swiperRef={swiperRef}
                      key={item.id}
                    />
                  ) : selected === 4 ? (
                    <PlacesCard
                      item={item}
                      swiperRef={swiperRef}
                      key={item.id}
                    />
                  ) : selected === 5 ? (
                    <EventsCard
                      item={item}
                      swiperRef={swiperRef}
                      key={item.id}
                    />
                  ) : null
                )
              ) : (
                <p>–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</p>
              )}
            </div>
          </div>
        </WidthBlock>
      </CenterBlock>
    </>
  );
}

export default Container1;
